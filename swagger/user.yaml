/user/{user_name}:
  get:
    tags:
      - User
    summary: 유저 정보 조회
    description: 유저 정보 조회 API
    parameters:
      - name: username
        in: path
        description: 유저 이름
        required: true
        schema:
          type: string
          example: '홍길동'
    responses:
      '200':
        description: 유저 정보 조회 성공
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  'code': 200,
                  'message': 'user found',
                  'user':
                    {
                      'id': 'id',
                      'name': '홍길동',
                      'email': 'example@naver.com',
                      'comment': 'comment'
                    }
                }
      '404':
        description: 잘못된 요청
        content:
          application/json:
            schema:
              type: object
              example: { 'code': 404, 'message': 'user not found' }

/user/me:
  get:
    tags:
      - User
    summary: 내 정보 조회
    description: 내 정보 조회 API
    responses:
      '200':
        description: 내 정보 조회 성공
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  'code': 200,
                  'message': 'user found',
                  'user':
                    {
                      'id': 'id',
                      'name': '홍길동',
                      'email': 'email@naver.com',
                      'comment': 'comment'
                    }
                }

  put:
    tags:
      - User
    summary: 내 정보 수정
    description: 내 정보 수정 API
    requestBody:
      x-name: body
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - user_name
              - comment
              - image
            properties:
              user_name:
                type: string
              comment:
                type: string
              image:
                type: string
                format: binary
          example:
            user_name: '홍길동'
            comment: '안녕하세요.'
    responses:
      '200':
        description: 유저 정보 수정 성공
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  'code': 200,
                  'message': 'user updated',
                  'user':
                    {
                      'id': 'id',
                      'name': '홍길동',
                      'email': 'example@naver.com',
                      'comment': 'comment',
                      'image': 'image',
                      'background': 'background'
                    }
                }
      '400':
        description: 잘못된 요청
        content:
          application/json:
            schema:
              type: object
              example: { 'code': 400, 'message': '올바르지 않은 요청입니다.' }

/user/me/background:
  put:
    tags:
      - User
    summary: 배경화면 수정
    description: 배경화면 수정 API
    requestBody:
      x-name: body
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - image
            properties:
              image:
                type: string
                format: binary
    responses:
      '200':
        description: 배경화면 수정 성공
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  'code': 200,
                  'message': 'background updated',
                  'user':
                    {
                      'id': 'id',
                      'name': '홍길동',
                      'email': 'example@naver.com',
                      'comment': 'comment',
                      'image': 'image',
                      'background': 'background'
                    }
                }
      '400':
        description: 잘못된 요청
        content:
          application/json:
            schema:
              type: object
              example: { 'code': 400, 'message': '올바르지 않은 요청입니다.' }
